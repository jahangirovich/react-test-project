{"version":3,"sources":["styledComponents/index.js","constants.js","api.js","components/Modal.jsx","components/AuthModal.jsx","components/EditModal.jsx","components/Pagination.jsx","pages/tasks.js","App.js","reportWebVitals.js","reducers/tasksList.js","store/index.js","index.js"],"names":["Button","styled","div","props","backgroundColor","Card","background","isAdmin","Category","Body","MainBody","Header","Modal","height","ActionTypes","API_URL","postRequest","url","form","callback","error_callback","axios","post","then","res","catch","err","response","SplashModal","isOpen","useSelector","state","taskListReducer","modal","setDispatcher","useDispatch","useState","setErr","username","email","text","setForms","handleChange","e","val","target","value","onClick","currentTarget","type","payload","closeModal","onSubmit","preventDefault","bodyFormData","FormData","append","st","Object","keys","data","message","forEach","onAddTask","htmlFor","id","onChange","className","auth_modal","password","localStorage","setItem","EditModel","open_detail","detail","detail_task","code","options","setOptions","status","getOption","cur","index","current","getCurrentOption","console","log","headers","window","getItem","putRequest","useEffect","map","i","event","optionsClick","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","push","Pagination","gotoPage","page","onPageChanged","f","currentPage","Math","max","min","totalPages","paginationData","pageLimit","totalRecords","setState","handleClick","evt","handleMoveLeft","pageNeighbours","handleMoveRight","fetchPageNumbers","totalNumbers","pages","leftBound","rightBound","beforeLastPage","startPage","endPage","singleSpillOffset","length","leftSpill","rightSpill","leftSpillPage","rightSpillPage","extraPages","current_page","ceil","this","aria-label","href","aria-hidden","Component","Tasks","match","params","history","useHistory","tasks","queries","editOpen","query","setQuery","sortBy","setSortBy","total","setTotal","parseInt","setCurrentPage","undefined","get","getTasks","total_task_count","querySelect","sortSelect","onCardClick","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","defaultState","reducers","combineReducers","action","createStore","GlobalStyle","createGlobalStyle","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75df4704.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const Button = styled.div`\n    padding: 10px 20px;\n    background-color: ${props => props.backgroundColor ? \"#5b80ba\" : \"white\"};\n    border: none;\n    border-radius: 40px;\n    box-shadow: 0px 8px 15px rgba(0, 0, 0, 0.1);\n    color: ${props => props.backgroundColor ? \"white\" : \"#5b80ba\"};\n    display: flex;\n    align-items: center;\n    \n    cursor: pointer;\n    margin: 0 10px;\n    &:focus {\n        outline: none;\n    }\n    &:hover{\n        background-color: white;\n        color: #5b80ba;\n    }\n    span{\n        margin: 0 10px;\n    }\n    \n`\n\nexport const Card = styled.div`\n    width: 100%;\n    background-color: ${props => {\n        if(props.background == 0){\n            return (\"#ffebee\")\n        }\n        else if(props.background == 1){\n            return (\"#fcccd4\")\n        }\n        else if(props.background == 10){\n            return (\"#e5f5d5\")\n        }\n        else{\n            return (\"#b7e08d\")\n        }\n    }};\n    padding: 8px 12px;\n    position: relative;\n    cursor: ${props => {\n        if(props.isAdmin) return \"pointer\";\n        else return \"unset\";\n    }};\n    margin: 10px 0;\n    .disabled{\n        display: none !important;\n    }\n    .editIcon{\n        position: absolute;\n        right: 50%;\n        font-size: 25px;\n        top: 20%;\n        display: none;\n    }\n    &:hover .editIcon{\n        display: inline-block\n    }\n`\n\nexport const Category = styled.div`\n    width: 100%;\n    padding: 8px 12px;\n    .byOrder{\n        span{\n            color: #a89151;\n            border: 1px solid #a89151;\n        }\n        .current{\n            background-color: #a89151;\n            color: white;\n        }\n    }\n    div{\n        margin: 10px 0;\n        span{\n            color: #5b80ba;\n            display: inline-block;\n            padding: 3px 15px;\n            border-radius: 20px;\n            border: 1px solid #5b80ba;\n            margin: 0 10px;\n            background-color: white;\n            cursor: pointer\n        }\n        .current{\n            background-color: #5b80ba;\n            color: white;\n        }\n    }\n`\n\nexport const Body = styled.div`\n    padding: 10px;\n    margin-top: 20px;\n`\n\nexport const MainBody = styled.div`\n  width: 100%;\n`\nexport const Header = styled.div`\n  display: flex;\n  align-items: center;\n`\n\nexport const Modal = styled.div`\n    width: 100%;\n    height: ${props => props.height}%;\n    background-color: rgba(0,0,0,0.5);\n    transition: 0.3s all;\n    overflow: hidden;\n    z-index: 10001;\n    display: flex;\n    max-height: 10000px;\n    justify-content: center;\n    left: 0;\n    top: 0;\n    position: fixed;\n    div{\n        form{\n            padding: 40px 10px;\n            width: 400px;\n            background-color: white;\n            .options{\n                span{\n                    display: block;\n                    border-radius: 20px;\n                    padding: 4px 10px;\n                    margin: 10px 0;\n                    cursor: pointer;\n                    background-color: #e6e6e6\n                }\n                .selected{\n                    background-color: #5b80ba !important;\n                    color: white\n                }\n            }\n            p{\n                position: relative;\n                margin: 10px 0;\n            }\n            .errors{\n                color: red;\n            }\n            input{\n                display: block;\n                width: 100%;\n                padding: 5px;\n                outline: none;\n                transition: 0.3s all;\n                border: none;\n                border-bottom: 1px solid #e6e6e6;\n                &:focus{\n                    border-bottom: 1px solid #5b80ba;\n                }\n                &[type=submit]{\n                    cursor: pointer;\n                    padding: 10px;\n                    background-color: #5b80ba;\n                    color: white;\n                    margin-top: 50px\n                }\n            }\n        }\n    }\n`\n","export const ActionTypes = {\n    SET_MODAL:      \"MODAL\",\n    SET_QUERIES:    \"SET_QUERY\",\n    SET_TASKS:      \"SET_DATA\",\n    SET_AUTH_MODAL: \"SET_AUTH_MODAL\",\n    SET_ADMIN:     \"SET_ADMIN\",\n    SET_DETAIL:     \"SET_DETAIL\",\n    OPEN_DETAIL:    \"OPEN_DETAIL\"\n}","import axios from 'axios'\nimport qs from 'qs'\n\nconst API_URL = 'http://test-project-laravel-react.herokuapp.com/api/';\n\nexport const getTasks = (callback, page, query) =>{\n    axios\n    .get(API_URL + `?developer=Zhahangir&page=${page}&sort_direction=${query['sort_direction']}&sort_field=${query['sort_field']}`)\n    .then((res)=>{\n        callback(res.data.message)\n    })\n    .catch((err) =>{\n        callback(err)\n    })\n}\n\nexport const postRequest = (url,form, callback, error_callback) => {\n    axios.post( API_URL + url,form,{ \"Content-Type\": \"multipart/form-data\" })\n    .then((res)=>{\n        callback(res)\n    })\n    .catch((err)=>{\n        error_callback(err.response)\n    })\n}\n\nexport const putRequest = (url,form, callback, error_callback) => {\n    axios.post( API_URL + url,form,{ headers: { \"Authorization\": `Bearer ${window.localStorage.getItem(\"user\")}` } })\n    .then((res)=>{\n        callback(res)\n    })\n    .catch((err)=>{\n        error_callback(err.response)\n    })\n}\n\n","import {Modal} from '../styledComponents/index'\nimport { useDispatch, useSelector } from 'react-redux';\nimport {ActionTypes} from '../constants'\nimport {postRequest} from '../api'\nimport {useState} from 'react' \n\nexport default function SplashModal(){\n    const isOpen   = useSelector((state) => state.taskListReducer.modal);\n    const setDispatcher     = useDispatch();\n    const[err, setErr]      = useState(\"\")\n    const [form, setForms] = useState({\n        username    : \"\",\n        email       : \"\",\n        text        : \"\"\n    })\n\n    function closeModal(e, height){\n        if(e.target != e.currentTarget) return;\n        setDispatcher({\n            type: ActionTypes.SET_MODAL,\n            payload: height\n        })\n    }\n\n    function onAddTask(e){\n        e.preventDefault();\n        var bodyFormData = new FormData();\n        bodyFormData.append(\"username\",form[\"username\"]);\n        bodyFormData.append(\"email\",form[\"email\"]);\n        bodyFormData.append(\"text\",form[\"text\"]);\n\n        postRequest(\"create\",bodyFormData,\n            function(res){\n                setDispatcher({\n                    type: ActionTypes.SET_MODAL,\n                    payload: 0\n                })\n            },function(res){\n                let st = \"\"\n                let obj = Object.keys(res.data.message)\n                obj.forEach((e)=>{\n                    st += e + \" \"  + res.data.message[e]\n                })\n                setErr(st)\n            })\n    }\n\n    function handleChange(e, val){\n        if(val == \"username\")\n            setForms({\n                ...form,\n                username: e.target.value\n            })\n        else if(val == \"email\")\n            setForms({\n                ...form,\n                email: e.target.value\n            })\n        else\n            setForms({\n                ...form,\n                text: e.target.value\n            })\n    }\n\n    return (\n        <Modal height={isOpen} onClick={(e) => closeModal(e,0)}>\n            <div>\n                <form onSubmit={(e) => onAddTask(e)}>\n                    <p>\n                        <label htmlFor=\"username\">Username:</label>\n                        <input type=\"text\"  id=\"username\" onChange={(e) => handleChange(e,\"username\")} />\n                    </p>\n                    <p>\n                        <label htmlFor=\"email\">Email:</label>\n                        <input type=\"text\"  id=\"email\" onChange={(e) => handleChange(e,\"email\")}/>\n                    </p>\n                    <p>\n                        <label htmlFor=\"text\">Text:</label>\n                        <input type=\"text\"  id=\"text\" onChange={(e) => handleChange(e,\"text\")}/>\n                    </p>\n                    <p className=\"errors\">\n                        {\n                            err\n                        }\n                    </p>\n                    <input type=\"submit\" />\n                </form>\n            </div>\n        </Modal>\n    )\n}","import {Modal} from '../styledComponents/index'\nimport { useDispatch, useSelector } from 'react-redux';\nimport {ActionTypes} from '../constants'\nimport {postRequest} from '../api'\nimport {useState} from 'react' \n\nexport default function SplashModal(){\n    const isOpen            = useSelector((state) => state.taskListReducer.auth_modal);\n    const setDispatcher     = useDispatch();\n    const[err, setErr]      = useState(\"\")\n    const [form, setForms]  = useState({\n        username    : \"\",\n        password       : \"\",\n    })\n\n    function closeModal(e, height){\n        if(e.target != e.currentTarget) return;\n        setDispatcher({\n            type: ActionTypes.SET_AUTH_MODAL,\n            payload: height\n        })\n    }\n\n    function onAddTask(e){\n        e.preventDefault();\n        var bodyFormData = new FormData();\n        bodyFormData.append(\"email\",form[\"username\"]);\n        bodyFormData.append(\"password\",form[\"password\"]);\n\n        postRequest(\"login\",bodyFormData,\n            function(res){\n                setDispatcher({\n                    type: ActionTypes.SET_AUTH_MODAL,\n                    payload: 0\n                })\n                setDispatcher({\n                    type: ActionTypes.SET_ADMIN,\n                    payload: true\n                })\n                localStorage.setItem(\"user\", res.data.message)\n            },function(res){\n                setErr(res.data.message)\n            })\n    }\n\n    function handleChange(e, val){\n        if(val == \"username\")\n            setForms({\n                ...form,\n                username: e.target.value\n            })\n\n        else\n            setForms({\n                ...form,\n                password: e.target.value\n            })\n    }\n\n    return (\n        <Modal height={isOpen} onClick={(e) => closeModal(e,0)}>\n            <div>\n                <form onSubmit={(e) => onAddTask(e)}>\n                    <p>\n                        <label htmlFor=\"username\">Username:</label>\n                        <input type=\"text\"  id=\"username\" onChange={(e) => handleChange(e,\"username\")} />\n                    </p>\n                    <p>\n                        <label htmlFor=\"email\">Password:</label>\n                        <input type=\"password\"  id=\"password\" onChange={(e) => handleChange(e,\"password\")}/>\n                    </p>\n                    <p className=\"errors\">\n                        {\n                            err\n                        }\n                    </p>\n                    <input type=\"submit\" />\n                </form>\n            </div>\n        </Modal>\n    )\n}","import {Modal,Card} from '../styledComponents/index'\nimport { useDispatch, useSelector } from 'react-redux';\nimport {ActionTypes} from '../constants'\nimport {putRequest} from '../api'\nimport {useState,useEffect} from 'react' \n\nexport default function EditModel(){\n    const isOpen    = useSelector((state) => state.taskListReducer.open_detail);\n    const detail    = useSelector((state) => state.taskListReducer.detail_task);\n\n    const [options, setOptions]   = useState([\n        {val: \"не выполнено\", code: 0}, \n        {val: \"задача не выполнена, отредактирована админом\",code: 1},\n        {val: \"задача выполнена\", code: 10},\n        {val: \"задача отредактирована админом и выполнена\", code: 11}])\n    const setDispatcher     = useDispatch();\n    const[err, setErr]      = useState(\"\")\n    const [form, setForms] = useState({\n        text        : detail.text,\n        status      : detail.status\n    })\n\n    useEffect(() => {\n        setForms(detail)\n        setOptions(options.map((e)=>{\n            if(e.code == detail.status){\n                return {\n                    ...e,\n                    current: true\n                }\n            }\n            return {\n                ...e,\n                current: false\n            }\n        }))\n    }, [detail])\n\n    function closeModal(e, height){\n        if(e.target != e.currentTarget) return;\n        setDispatcher({\n            type: ActionTypes.OPEN_DETAIL,\n            payload: height\n        })\n    }\n\n    function onAddTask(e){\n        e.preventDefault();\n        var bodyFormData = new FormData();\n        let getOption = getCurrentOption();\n        console.log(getOption)\n        bodyFormData.append(\"text\",form[\"text\"]);\n        bodyFormData.append(\"status\", getOption)\n\n        putRequest(\"edit/\"+detail.id,bodyFormData,\n            function(res){\n                setDispatcher({\n                    type: ActionTypes.OPEN_DETAIL,\n                    payload: 0\n                })\n\n            },function(res){\n                setErr(res)\n            })\n    }\n\n    function getCurrentOption(){\n        let cur = 0\n        options.forEach((e,index) => {\n            if(e.current) cur =  e.code;\n        })\n        return cur\n    }\n\n    function handleChange(e, val){\n        \n        setForms({\n            ...form,\n            text: e.target.value\n        })\n    }\n\n    function optionsClick(event , i){\n        setOptions(options.map((e,index)=>{\n            if(index == i){\n                return {\n                    ...e,\n                    current: true\n                }\n            }\n            return {\n                ...e,\n                current: false\n            }\n        }))\n    }\n\n    return (\n        <Modal height={isOpen} onClick={(e) => closeModal(e,0)}>\n            <div>\n                <form onSubmit={(e) => onAddTask(e)}>\n                   \n                    <p>\n                        <label htmlFor=\"text\">Text:</label>\n                        <input type=\"text\"  id=\"text\" value={form.text} onChange={(e) => handleChange(e,\"text\")}/>\n                    </p>\n                    <p className=\"options\">\n                        <label htmlFor=\"men\">Status:</label>\n                        {\n                            options.map((e,i) => {\n                                return (\n                                    <span onClick={() => optionsClick(e,i)} key={i} background={e.code} className={e.current ? \"selected\" : \"\"}>{e.val}</span>\n                                )\n                            })\n                        }\n                    </p>\n                    <p className=\"errors\">\n                        {\n                            err\n                        }\n                    </p>\n                    <input type=\"submit\" />\n                </form>\n            </div>\n        </Modal>\n    )\n}","import React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nclass Pagination extends Component {\n  constructor(props) {\n    super(props);\n    const { totalRecords = null, pageLimit = 30, pageNeighbours = 0, currentPage = 1} = props;\n\n    this.pageLimit = typeof pageLimit === \"number\" ? pageLimit : 30;\n    this.totalRecords = typeof totalRecords === \"number\" ? totalRecords : 0;\n    this.current_page = currentPage;\n\n    this.pageNeighbours =\n      typeof pageNeighbours === \"number\"\n        ? Math.max(0, Math.min(pageNeighbours, 2))\n        : 0;\n\n    this.totalPages = Math.ceil(this.totalRecords / this.pageLimit);\n\n    this.state = { currentPage: currentPage };\n  }\n\n  componentDidMount() {\n    this.gotoPage(this.current_page);\n  }\n\n  gotoPage = page => {\n    const { onPageChanged = f => f } = this.props;\n\n    const currentPage = Math.max(0, Math.min(page, this.totalPages));\n\n    const paginationData = {\n      currentPage,\n      totalPages: this.totalPages,\n      pageLimit: this.pageLimit,\n      totalRecords: this.totalRecords\n    };\n\n    this.setState({ currentPage }, () => onPageChanged(paginationData));\n  };\n\n  handleClick = (page, evt) => {\n    evt.preventDefault();\n    this.gotoPage(page);\n  };\n\n  handleMoveLeft = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage - this.pageNeighbours * 2 - 1);\n  };\n\n  handleMoveRight = evt => {\n    evt.preventDefault();\n    this.gotoPage(this.state.currentPage + this.pageNeighbours * 2 + 1);\n  };\n\n  fetchPageNumbers = () => {\n    const totalPages = this.totalPages;\n    const currentPage = this.state.currentPage;\n    const pageNeighbours = this.pageNeighbours;\n\n    const totalNumbers = this.pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      let pages = [];\n\n      const leftBound = currentPage - pageNeighbours;\n      const rightBound = currentPage + pageNeighbours;\n      const beforeLastPage = totalPages - 1;\n\n      const startPage = leftBound > 2 ? leftBound : 2;\n      const endPage = rightBound < beforeLastPage ? rightBound : beforeLastPage;\n\n      pages = range(startPage, endPage);\n\n      const pagesCount = pages.length;\n      const singleSpillOffset = totalNumbers - pagesCount - 1;\n\n      const leftSpill = startPage > 2;\n      const rightSpill = endPage < beforeLastPage;\n\n      const leftSpillPage = LEFT_PAGE;\n      const rightSpillPage = RIGHT_PAGE;\n\n      if (leftSpill && !rightSpill) {\n        const extraPages = range(startPage - singleSpillOffset, startPage - 1);\n        pages = [leftSpillPage, ...extraPages, ...pages];\n      } else if (!leftSpill && rightSpill) {\n        const extraPages = range(endPage + 1, endPage + singleSpillOffset);\n        pages = [...pages, ...extraPages, rightSpillPage];\n      } else if (leftSpill && rightSpill) {\n        pages = [leftSpillPage, ...pages, rightSpillPage];\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  };\n\n  render() {\n\n    if (!this.totalRecords) return null;\n\n    if (this.totalPages === 1) return null;\n\n    const { currentPage } = this.state;\n    const pages = this.fetchPageNumbers();\n\n\n    return (\n      <Fragment>\n        <nav aria-label=\"Countries Pagination\">\n          <ul className=\"pagination\">\n            {pages.map((page, index) => {\n              if (page === LEFT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <a\n                      className=\"page-link\"\n                      href=\"#\"\n                      aria-label=\"Previous\"\n                      onClick={this.handleMoveLeft}\n                    >\n                      <span aria-hidden=\"true\">&laquo;</span>\n                      <span className=\"sr-only\">Previous</span>\n                    </a>\n                  </li>\n                );\n\n              if (page === RIGHT_PAGE)\n                return (\n                  <li key={index} className=\"page-item\">\n                    <a\n                      className=\"page-link\"\n                      href=\"#\"\n                      aria-label=\"Next\"\n                      onClick={this.handleMoveRight}\n                    >\n                      <span aria-hidden=\"true\">&raquo;</span>\n                      <span className=\"sr-only\">Next</span>\n                    </a>\n                  </li>\n                );\n\n              return (\n                <li\n                  key={index}\n                  className={`page-item${\n                    currentPage === page ? \" active\" : \"\"\n                  }`}\n                >\n                  <a\n                    className=\"page-link\"\n                    href=\"#\"\n                    onClick={e => this.handleClick(page, e)}\n                  >\n                    {page}\n                  </a>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>\n      </Fragment>\n    );\n  }\n}\n\nPagination.propTypes = {\n  totalRecords: PropTypes.number.isRequired,\n  pageLimit: PropTypes.number,\n  pageNeighbours: PropTypes.number,\n  onPageChanged: PropTypes.func,\n  currentPage: PropTypes.number\n};\n\nexport default Pagination;\n","import {\n    Button,\n    Card,\n    Body,\n    MainBody,\n    Header,\n    Category} from '../styledComponents/index'\nimport SplashModal from '../components/Modal'\nimport AuthModal from '../components/AuthModal'\nimport EditModel from '../components/EditModal'\nimport {useEffect,useState} from 'react'\nimport {getTasks} from '../api'\nimport {useHistory} from 'react-router-dom'\nimport Pagination from '../components/Pagination';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {ActionTypes} from '../constants'\n\n\nfunction Tasks(props) {\n    \n    const{\n        id\n    } = props.match.params\n    var history             = useHistory();\n\n    const setDispatcher     = useDispatch();\n    const tasks             = useSelector((state) => state.taskListReducer.tasks);\n    const isAdmin           = useSelector((state) => state.taskListReducer.isAdmin);\n    const queries           = useSelector((state) => state.taskListReducer.queries);\n    const editOpen            = useSelector((state) => state.taskListReducer.open_detail);\n\n    const[query, setQuery]  = useState([{val : \"username\" , current: true},{val : \"email\", current: false},{val : \"status\", current: false}])\n    const[sortBy, setSortBy]   = useState([{val: \"DESC\", current: true}, {val: \"ASC\", current: false}])\n\n    const[total, setTotal] = useState(0)\n    const[currentPage, setCurrentPage] = useState(parseInt(id))\n\n    const onPageChanged = (currentPage)=>{\n        if(currentPage.currentPage == undefined){\n            history.push(`/page/${currentPage}`)\n            return;\n        }\n        history.push(`/page/${currentPage.currentPage}`)\n        setCurrentPage(currentPage.currentPage)\n    }  \n\n    useEffect(()=>{\n        if(localStorage.getItem(\"user\") != undefined) \n            setDispatcher({\n                type: ActionTypes.SET_ADMIN,\n                payload: true\n            })\n    },[isAdmin])\n\n    useEffect(()=>{\n        getTasks(function(res){\n            setTotal(res.total_task_count)\n            setDispatcher({\n                type: ActionTypes.SET_TASKS,\n                payload: res.tasks\n            })\n        },currentPage, queries)\n    },[currentPage,queries,editOpen])\n\n    useEffect(() => {\n        setQuery(query.map((e)=>{\n            if(e.val == queries[\"sort_field\"]){\n                return {\n                    val: e.val,\n                    current: true\n                }\n            }\n            return {\n                val: e.val,\n                current: false\n            }\n        }))\n\n        setSortBy(sortBy.map((e)=>{\n            if(e.val == queries[\"sort_direction\"]){\n                return {\n                    val: e.val,\n                    current: true\n                }\n            }\n            return {\n                val: e.val,\n                current: false\n            }\n        }))\n\n    }, [queries])\n\n    function querySelect(e){\n        setDispatcher({\n            type: ActionTypes.SET_QUERIES,\n            payload: {\n                \"sort_field\": query[e].val,\n                \"sort_direction\": queries[\"sort_direction\"]\n            }\n        })\n    }\n\n    function sortSelect(e){\n        setDispatcher({\n            type: ActionTypes.SET_QUERIES,\n            payload: {\n                \"sort_field\": queries[\"sort_field\"],\n                \"sort_direction\": sortBy[e].val\n            }\n        })\n    }\n\n    function openModal(e){\n        setDispatcher({\n            type: ActionTypes.SET_MODAL,\n            payload: e\n        })\n    }\n\n    function openAuthModal(e){\n        setDispatcher({\n            type: ActionTypes.SET_AUTH_MODAL,\n            payload: e\n        })\n    }\n\n    function onCardClick(e){\n        if(localStorage.getItem(\"user\") == undefined) return;\n\n        setDispatcher({\n            type:ActionTypes.SET_DETAIL,\n            payload: e\n        })\n\n        setDispatcher({\n            type: ActionTypes.OPEN_DETAIL,\n            payload: 100\n        })\n    }\n\n    return (\n        <MainBody>\n            <Header>\n                <Button backgroundColor onClick={() => { openModal(100) }}>\n                    Создать задачу\n                </Button>\n                <Button onClick={() => openAuthModal(100)}>\n                    <span>Войти как админ</span> \n                    <i className=\"fa fa-server\"></i>\n                </Button>\n            </Header>\n            <Body>\n                <Category>\n                    <div>\n                        {\n                            query.map((e, i)=>{\n                                return(\n                                    <span key={i} className={e.current ? \"current\" : \"\"} onClick={() => querySelect(i)}>{e.val}</span>\n                                )\n                            })\n                        }\n                    </div>\n                    <div className=\"byOrder\">\n                        {\n                            sortBy.map((e,i) =>{\n                                return(\n                                    <span key={i} className={e.current ? \"current\" : \"\"} onClick={() => sortSelect(i)}>{e.val}</span>\n                                )\n                            })\n                        }\n                    </div>\n                </Category>\n                {\n                    tasks ? tasks.map((e,i) => {\n                        return (\n                            <div key={e.id}>\n                                \n                                <Card background={e.status} isAdmin={isAdmin} onClick={() => onCardClick(e)}>\n                                    <span className=\"author-name\">\n                                        {e.username}\n                                    </span>\n                                    <h3>\n                                        {e.text}\n                                    </h3>\n                                    <span className=\"author-email\">\n                                        {e.email}\n                                    </span>\n                                    <span className={isAdmin ? \"editIcon\" : \"disabled editIcon\"}>\n                                        <i className=\"fa fa-edit\"></i>\n                                    </span>\n                                </Card>\n                            </div>\n                        )\n                    }) : null\n                }\n            </Body>\n            <SplashModal/>\n            <AuthModal/>\n            <EditModel/>\n            {\n                total ? <Pagination\n                    totalRecords={total}\n                    pageLimit={3}\n                    pageNeighbours={1}\n                    onPageChanged={onPageChanged}\n                    currentPage={parseInt(id)}\n                />\n                : null\n            }\n        </MainBody>\n    );\n}\n\n\nexport default Tasks;\n  ","import {BrowserRouter as Router, Route , Switch} from 'react-router-dom'\nimport Tasks from './pages/tasks'\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/page/:id' exact component={Tasks}/>\n      </Switch>\n    </Router>\n   );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionTypes} from '../constants'\n\nconst defaultState = {\n    tasks:      [],\n    queries:    {\"sort_direction\":\"ASC\",\"sort_field\":\"username\"},\n    modal:      0,\n    auth_modal: 0,\n    isAdmin:    false,\n    detail_task:{},\n    open_detail: 0\n}\n\nexport function taskListReducer(state = defaultState, action){\n    switch(action.type){\n        case ActionTypes.SET_TASKS:\n            return {...state, tasks: action.payload}\n        case ActionTypes.SET_QUERIES:\n            return {...state, queries: action.payload}\n        case ActionTypes.SET_MODAL:\n            return {...state, modal: action.payload}\n        case ActionTypes.SET_AUTH_MODAL:\n            return {...state, auth_modal: action.payload}\n        case ActionTypes.SET_ADMIN:\n            return {...state, isAdmin: action.payload}\n        case ActionTypes.SET_DETAIL:\n            return {...state, detail_task: action.payload}\n        case ActionTypes.OPEN_DETAIL:\n            return {...state, open_detail: action.payload}\n        default:\n            return state\n    }\n}\n","import {createStore, combineReducers} from 'redux'\nimport {taskListReducer } from '../reducers/tasksList'\n\nconst reducers = combineReducers({ taskListReducer })\n\nexport default createStore(reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport { createGlobalStyle } from 'styled-components'\nimport store from './store/index'\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0 auto;\n    width: 70%;\n    padding: 10px;\n  }\n  *{\n    box-sizing: border-box;\n    font-family: 'Montserrat', sans-serif;\n  }\n`\nwindow.store = store\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n      <GlobalStyle>\n      </GlobalStyle>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}